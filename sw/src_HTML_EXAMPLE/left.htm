<!-- -------------------------------------------- -->
<!-- ---------------- MQTT DEBUG Monitor -------- -->
<!-- 
    Mashed up by: Mark McDermott
    Project:      EE445L Lab 4E
    Date:         5/23/23
-->


<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<style>
#messages
{
background-color:rgb(11, 126, 161);
font-size:3;
font-weight:bold;
color:white;
line-height:140%;
}
#status
{
background-color:rgb(11, 126, 161);
font-size:3;
font-weight:bold;
color:white;
line-height:140%;
}

hr {
  border: none;
  height: 5px;
  /* Set the hr color */
  background-color: #2ca3b8;  /* Modern Browsers */
}

</style>

<!-- -------------------------------------------- -->
<!-- ---------------- HTML HEAD ----------------- -->

  <head>
    <title>MQTT Monitor</title>

    <meta name="viewport" content="width=device-width, initial-scale=1.0">

	<script src="https://cdnjs.cloudflare.com/ajax/libs/paho-mqtt/1.0.1/mqttws31.js" type="text/javascript"></script>
 	
    <script type = "text/javascript" 
         src = "https://ajax.googleapis.com/ajax/libs/jquery/2.1.3/jquery.min.js"></script>
    
    
    <script type = "text/javascript">
    
    

	function onConnectionLost()
    {
	    console.log("connection lost");
	    document.getElementById("status").innerHTML = "Connection Lost";
	    document.getElementById("messages").innerHTML ="Connection Lost";
	    connected_flag=0;
	}

	function onFailure(message) 
    {
		console.log("Failed");
		document.getElementById("messages").innerHTML = "Connection Failed- Retrying";
        setTimeout(MQTTconnect, reconnectTimeout);
    }
	
    function onMessageArrived(r_message)
    {
		out_msg="Message received "+r_message.payloadString+"<br>";
		out_msg=out_msg+"Message received Topic "+r_message.destinationName;
		//console.log("Message received ",r_message.payloadString);
		console.log(out_msg);
		document.getElementById("messages").innerHTML =out_msg;
	}
	
    function onConnected(recon,url)
    {
	    console.log(" in onConnected " +reconn);
	}

	function onConnect() 
    {
	  // Once a connection has been made, make a subscription and send a message.
	    document.getElementById("messages").innerHTML ="Connected to:    "+host +"   on port:  "+port;
	    connected_flag=1
	    document.getElementById("status").innerHTML = "Connected";
	    console.log("on Connect "+connected_flag);
	    //mqtt.subscribe("sensor1");
	    //message = new Paho.MQTT.Message("Hello World");
	    //message.destinationName = "sensor1";
	    //mqtt.send(message);
	}

    function MQTTconnect() 
    {
	    document.getElementById("messages").innerHTML ="";
	    var s   = document.forms["connform"]["server"].value;
	    var p   = document.forms["connform"]["port"].value;
	    var eid = document.forms["connform"]["eid"].value;
        if (p!="")
	    {
	        //console.log("ports");
		    port=parseInt(p);
		    console.log("port:  " +port);
		}
	    
        if (s!="")
	    {
		    host=s;
		    console.log("host");
		}
	    
        console.log("connecting to "+ host +":"+ port);
	    
        var x = Math.floor(Math.random() * 10000); 
	    var cname = "mqtt_monitor-"+eid;

	    mqtt = new Paho.MQTT.Client(host,port,cname);
        
        console.log("Client name: "+ cname );

	
        // document.write("connecting to "+ host);
	
        var options = {
            timeout: 3,
		    onSuccess: onConnect,
		    onFailure: onFailure,
        };
	
        mqtt.onConnectionLost = onConnectionLost;
        mqtt.onMessageArrived = onMessageArrived;
		//mqtt.onConnected = onConnected;

	    mqtt.connect(options);
	    return false;
  
	}

	function sub_topics()
    {
		document.getElementById("messages").innerHTML ="";
		
        if (connected_flag==0){
		    out_msg="<b>Not Connected so can't subscribe</b>"
		    console.log(out_msg);
		    document.getElementById("messages").innerHTML = out_msg;
		    return false;
	    }

	    var stopic= document.forms["subs"]["Stopic"].value;
	    console.log("Subscribing to topic ="+stopic);
	    mqtt.subscribe(stopic);
	    return false;
	}

	function send_message()
    {
		document.getElementById("messages").innerHTML ="";
		
        if (connected_flag==0){
		    out_msg="<b>Not Connected so can't send</b>"
		    console.log(out_msg);
		    document.getElementById("messages").innerHTML = out_msg;
		    return false;
		}

		var msg = document.forms["smessage"]["message"].value;
		console.log(msg);

		var topic = document.forms["smessage"]["Ptopic"].value;
		message = new Paho.MQTT.Message(msg);
		
        if (topic=="")
			message.destinationName = "test-topic"
		else
			message.destinationName = topic;
		    mqtt.send(message);
		return false;
	}

    </script>

  </head>
  
 <!-- -------------------------------------------- -->
 <!-- -----------  BODY of the MQTT Monitor ------ --> 
  
  <body>
    <h3>MQTT Monitor</h3>
	
	    <script type = "text/javascript">


        </script>

	<script>
	    var connected_flag=0	
	    var mqtt;
        var reconnectTimeout = 2000;
	    //var host="192.168.1.41";
	    //var port=9001;
	</script>
 
<div id="status">Status: Not Connected</div>
</div>

<br>
<form name="connform" action="" onsubmit="return MQTTconnect()">

    Server: <input type="text"      name= "server"  value="192.168.0.143"><br><br>
    Port:   <input type="text"      name= "port"    value="9001"><br><br>
    EID:    <input type="text"      name= "eid"     value="mcdermot">  <br><br>
            <input type="submit"                    value="Connect">
</form>
    
<hr>
<form name="subs" action="" onsubmit="return sub_topics()">
    Subscribe Topic:    <input type="text"      name="Stopic" value="mcdermot/b2w/#""> <br><br>
                        <input type="submit"    value="Subscribe">
</form> 

<hr>
<form name="smessage" action="" onsubmit="return send_message()">
    
    Publish Topic:      <input type="text"  name="Ptopic"  value= "mcdermot/w2b"> <br><br>
    Publish Message:    <input type="text"  name="message"><br><br>
                        <input type="submit" value="Submit">
</form>


<hr>
Received Messages:<p id="messages"></p>

   </body>
</html>
